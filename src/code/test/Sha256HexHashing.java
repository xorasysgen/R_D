package code.test;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.apache.commons.codec.digest.DigestUtils;
import org.bouncycastle.util.encoders.Hex;

public class Sha256HexHashing {

  public static void main(String[] args) throws Exception {
    testHashingTechnique();
  }

  private static void testHashingTechnique() throws UnsupportedEncodingException, NoSuchAlgorithmException {
	  String bigShit="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#%#sdffsgsdfgjghisdf54484fgdfdgs00";
	  System.out.println("bigShit Lenght=> " + bigShit.length());
	  String sha256hex = DigestUtils.sha256Hex(bigShit);
	  System.out.println(sha256hex);
	  
	  MessageDigest digest = MessageDigest.getInstance("SHA-256");
	  byte[] hash = digest.digest(bigShit.getBytes(StandardCharsets.UTF_8));
	  sha256hex = new String(Hex.encode(hash));
	  System.out.println(sha256hex);
	  System.out.println(SHA256Hashing.HashWithApacheCommons(bigShit));
	  System.out.println(SHA256Hashing.HashWithBouncyCastle(bigShit));
	  System.out.println(SHA256Hashing.HashWithGuava(bigShit));
	  System.out.println(SHA256Hashing.HashWithJavaMessageDigest(bigShit));
	  
	  System.out.println("boot " + SHA256Hashing.HashWithApacheCommons("boot@101#$"));
	  System.out.println("sandeep " + SHA256Hashing.HashWithBouncyCastle("sandeep@101#$"));
	  System.out.println("jsr " + SHA256Hashing.HashWithGuava("jsr@101#$"));
	  System.out.println("ranjeet " + SHA256Hashing.HashWithJavaMessageDigest("ranjeet@101#$"));
	  System.out.println("bimlesh " + SHA256Hashing.HashWithJavaMessageDigest("bimlesh@101#$"));
	  System.out.println("dinesh " + SHA256Hashing.HashWithJavaMessageDigest("dinesh@101#$"));
	  
	  
	  
  }

}
